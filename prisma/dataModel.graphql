type Role {
  id: ID! @id
  name: String! @unique
  claims: [Claim] @relation(name: "RoleClaims")
}

type Claim {
  id: ID! @id
  name: String! @unique
  description: String
}

type User {
  id: ID! @id @unique
  email: String! @unique
  password: String
  name: String
  city: City @relation(name: "Hometown")
  roles: [Role]
  votes: Int
  wallet: Wallet
}

type City {
  id: ID! @id
  name: String! @unique
  available: Boolean!
  votes: Int
  wallet: Wallet
}

type Offer {
  id: ID! @id
  name: String!
  image: String!
  description: String

  availabilityStarts: String
  businessFunction: String
  price: Float
  priceCurrency: String
  category: String

  count: Int
}

type Wallet {
  id: ID! @id
  votes: Int
  omos: Int
}

type Transaction {
  id: ID! @id
  input: User! @relation(name: "Input")
  output: City! @relation(name: "Output")
  # operation: TransactionType! @relation(name: "Operation")
  # asset: TransactionAsset! @relation(name: "Asset")
  amount: Int!
  # condition: String
}

enum TransactionAsset {
  VOTE
  OMO
  EUR
}

enum TransactionType {
  CREATE
  TRANSFER
}

enum InvitationType {
  EMAIL
}

type Invitation {
  id: ID! @id
  type: InvitationType!
  user: User! @relation(name: "Inviter")
  email: String
  name: String
  city: City
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type EmailTemplate {
  id: ID! @id
  name: String! @unique
  from: String!
  subject: String!
  text: String
  html: String
}
