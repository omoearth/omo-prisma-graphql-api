type Role {
  id: ID! @id
  name: String! @unique
  claims: [Claim] @relation(name: "RoleClaims")
}

type Claim {
  id: ID! @id
  name: String! @unique
  description: String
}

type User {
  id: ID! @id @unique
  email: String! @unique
  password: String
  name: String
  city: City @relation(name: "Hometown")
  roles: [Role]
}

type City {
  id: ID! @id
  name: String! @unique
  available: Boolean!
  votes: Int
}

interface Thing {
  id: ID! @id
  name: String!
  image: String
  description: String
}

type Offer implements Thing {
  id: ID! @id
  name: String!
  image: String!
  description: String

  availabilityStarts: String
  businessFunction: String
  price: Float
  priceCurrency: String
  category: String

  count: Int
}

enum InvitationType {
  EMAIL
}

type Invitation {
  id: ID! @id
  type: InvitationType!
  user: User! @relation(name: "Inviter")
  email: String
  name: String
  city: City
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type EmailTemplate {
  id: ID! @id
  name: String! @unique
  from: String!
  subject: String!
  text: String
  html: String
}
