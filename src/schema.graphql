# type definitions
# import Node from 'generated/prisma.graphql'
# import User from 'generated/prisma.graphql'
# import UserCreateInput from 'generated/prisma.graphql'
# import UserWhereUniqueInput from 'generated/prisma.graphql'

# mutations
# import createUser from 'generated/prisma.graphql'

# queries
# import user from 'generated/prisma.graphql'

type Query {
  currentUser: User!
  node(id: ID!): Node
}

type Mutation {
  register(email: String!, password: String!): User!
  login(email: String!, password: String!): LoginResponse!
}

type LoginResponse {
  token: String
  user: User
}

# import UserOrderByInput, CityOrderByInput from './generated/prisma.graphql'

# type Query {
#   users(
#     filter: String
#     first: Int
#     skip: Int
#     after: String
#     orderBy: UserOrderByInput
#   ): [User!]!
#   cities(
#     filter: String
#     first: Int
#     skip: Int
#     after: String
#     orderBy: CityOrderByInput
#   ): [City!]!
#   city(id: ID!): City!
#   me: User!
# }
# type Mutation {
#   createUser(data: CreateUserInput!): AuthPayload!
#   loginUser(data: LoginUserInput!): AuthPayload!
#   deleteUser: User!
#   updateUser(data: UpdateUserInput!): User!
#   createCity(data: CreateCityInput!): City!
#   deleteCity(id: ID!): City!
#   updateCity(id: ID!, data: UpdateCityInput!): City!
# }
# type Subscription {
#   city: CitySubscriptionPayload!
#   cities: [City!]!
# }
# type AuthPayload {
#   token: String!
#   user: User!
# }
# input CreateUserInput {
#   name: String!
#   email: String!
#   password: String
# }
# input LoginUserInput {
#   email: String!
#   password: String!
# }
# input UpdateUserInput {
#   name: String
#   email: String
#   password: String
# }
# input CreateCityInput {
#   name: String!
#   available: Boolean!
# }
# input UpdateCityInput {
#   name: String
#   available: Boolean
# }
# type User {
#   id: ID!
#   name: String!
#   email: String
#   createdAt: String!
#   updatedAt: String!
# }
# type City {
#   id: ID!
#   name: String!
#   available: Boolean!
#   createdAt: String!
#   updatedAt: String!
#   votes: Int!
# }
# enum MutationType {
#   CREATED
#   UPDATED
#   DELETED
# }
# type CitySubscriptionPayload {
#   mutation: MutationType!
#   node: City
# }

# type Votes {
#   voteCount: Int!
#   voteStr: String
# }
