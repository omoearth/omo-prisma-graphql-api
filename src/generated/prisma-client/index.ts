// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  balance: (where?: BalanceWhereInput) => Promise<boolean>;
  city: (where?: CityWhereInput) => Promise<boolean>;
  claim: (where?: ClaimWhereInput) => Promise<boolean>;
  emailTemplate: (where?: EmailTemplateWhereInput) => Promise<boolean>;
  invitation: (where?: InvitationWhereInput) => Promise<boolean>;
  offer: (where?: OfferWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  transaction: (where?: TransactionWhereInput) => Promise<boolean>;
  transactionType: (where?: TransactionTypeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  wallet: (where?: WalletWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetNullablePromise;
  assets: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Asset>;
  assetsConnection: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssetConnectionPromise;
  balance: (where: BalanceWhereUniqueInput) => BalanceNullablePromise;
  balances: (args?: {
    where?: BalanceWhereInput;
    orderBy?: BalanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Balance>;
  balancesConnection: (args?: {
    where?: BalanceWhereInput;
    orderBy?: BalanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BalanceConnectionPromise;
  city: (where: CityWhereUniqueInput) => CityNullablePromise;
  cities: (args?: {
    where?: CityWhereInput;
    orderBy?: CityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<City>;
  citiesConnection: (args?: {
    where?: CityWhereInput;
    orderBy?: CityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CityConnectionPromise;
  claim: (where: ClaimWhereUniqueInput) => ClaimNullablePromise;
  claims: (args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Claim>;
  claimsConnection: (args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClaimConnectionPromise;
  emailTemplate: (
    where: EmailTemplateWhereUniqueInput
  ) => EmailTemplateNullablePromise;
  emailTemplates: (args?: {
    where?: EmailTemplateWhereInput;
    orderBy?: EmailTemplateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EmailTemplate>;
  emailTemplatesConnection: (args?: {
    where?: EmailTemplateWhereInput;
    orderBy?: EmailTemplateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailTemplateConnectionPromise;
  invitation: (where: InvitationWhereUniqueInput) => InvitationNullablePromise;
  invitations: (args?: {
    where?: InvitationWhereInput;
    orderBy?: InvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Invitation>;
  invitationsConnection: (args?: {
    where?: InvitationWhereInput;
    orderBy?: InvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InvitationConnectionPromise;
  offer: (where: OfferWhereUniqueInput) => OfferNullablePromise;
  offers: (args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Offer>;
  offersConnection: (args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OfferConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  transaction: (
    where: TransactionWhereUniqueInput
  ) => TransactionNullablePromise;
  transactions: (args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Transaction>;
  transactionsConnection: (args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TransactionConnectionPromise;
  transactionType: (
    where: TransactionTypeWhereUniqueInput
  ) => TransactionTypeNullablePromise;
  transactionTypes: (args?: {
    where?: TransactionTypeWhereInput;
    orderBy?: TransactionTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TransactionType>;
  transactionTypesConnection: (args?: {
    where?: TransactionTypeWhereInput;
    orderBy?: TransactionTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TransactionTypeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  wallet: (where: WalletWhereUniqueInput) => WalletNullablePromise;
  wallets: (args?: {
    where?: WalletWhereInput;
    orderBy?: WalletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Wallet>;
  walletsConnection: (args?: {
    where?: WalletWhereInput;
    orderBy?: WalletOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WalletConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (args: {
    data: AssetUpdateInput;
    where: AssetWhereUniqueInput;
  }) => AssetPromise;
  updateManyAssets: (args: {
    data: AssetUpdateManyMutationInput;
    where?: AssetWhereInput;
  }) => BatchPayloadPromise;
  upsertAsset: (args: {
    where: AssetWhereUniqueInput;
    create: AssetCreateInput;
    update: AssetUpdateInput;
  }) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createBalance: (data: BalanceCreateInput) => BalancePromise;
  updateBalance: (args: {
    data: BalanceUpdateInput;
    where: BalanceWhereUniqueInput;
  }) => BalancePromise;
  updateManyBalances: (args: {
    data: BalanceUpdateManyMutationInput;
    where?: BalanceWhereInput;
  }) => BatchPayloadPromise;
  upsertBalance: (args: {
    where: BalanceWhereUniqueInput;
    create: BalanceCreateInput;
    update: BalanceUpdateInput;
  }) => BalancePromise;
  deleteBalance: (where: BalanceWhereUniqueInput) => BalancePromise;
  deleteManyBalances: (where?: BalanceWhereInput) => BatchPayloadPromise;
  createCity: (data: CityCreateInput) => CityPromise;
  updateCity: (args: {
    data: CityUpdateInput;
    where: CityWhereUniqueInput;
  }) => CityPromise;
  updateManyCities: (args: {
    data: CityUpdateManyMutationInput;
    where?: CityWhereInput;
  }) => BatchPayloadPromise;
  upsertCity: (args: {
    where: CityWhereUniqueInput;
    create: CityCreateInput;
    update: CityUpdateInput;
  }) => CityPromise;
  deleteCity: (where: CityWhereUniqueInput) => CityPromise;
  deleteManyCities: (where?: CityWhereInput) => BatchPayloadPromise;
  createClaim: (data: ClaimCreateInput) => ClaimPromise;
  updateClaim: (args: {
    data: ClaimUpdateInput;
    where: ClaimWhereUniqueInput;
  }) => ClaimPromise;
  updateManyClaims: (args: {
    data: ClaimUpdateManyMutationInput;
    where?: ClaimWhereInput;
  }) => BatchPayloadPromise;
  upsertClaim: (args: {
    where: ClaimWhereUniqueInput;
    create: ClaimCreateInput;
    update: ClaimUpdateInput;
  }) => ClaimPromise;
  deleteClaim: (where: ClaimWhereUniqueInput) => ClaimPromise;
  deleteManyClaims: (where?: ClaimWhereInput) => BatchPayloadPromise;
  createEmailTemplate: (data: EmailTemplateCreateInput) => EmailTemplatePromise;
  updateEmailTemplate: (args: {
    data: EmailTemplateUpdateInput;
    where: EmailTemplateWhereUniqueInput;
  }) => EmailTemplatePromise;
  updateManyEmailTemplates: (args: {
    data: EmailTemplateUpdateManyMutationInput;
    where?: EmailTemplateWhereInput;
  }) => BatchPayloadPromise;
  upsertEmailTemplate: (args: {
    where: EmailTemplateWhereUniqueInput;
    create: EmailTemplateCreateInput;
    update: EmailTemplateUpdateInput;
  }) => EmailTemplatePromise;
  deleteEmailTemplate: (
    where: EmailTemplateWhereUniqueInput
  ) => EmailTemplatePromise;
  deleteManyEmailTemplates: (
    where?: EmailTemplateWhereInput
  ) => BatchPayloadPromise;
  createInvitation: (data: InvitationCreateInput) => InvitationPromise;
  updateInvitation: (args: {
    data: InvitationUpdateInput;
    where: InvitationWhereUniqueInput;
  }) => InvitationPromise;
  updateManyInvitations: (args: {
    data: InvitationUpdateManyMutationInput;
    where?: InvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertInvitation: (args: {
    where: InvitationWhereUniqueInput;
    create: InvitationCreateInput;
    update: InvitationUpdateInput;
  }) => InvitationPromise;
  deleteInvitation: (where: InvitationWhereUniqueInput) => InvitationPromise;
  deleteManyInvitations: (where?: InvitationWhereInput) => BatchPayloadPromise;
  createOffer: (data: OfferCreateInput) => OfferPromise;
  updateOffer: (args: {
    data: OfferUpdateInput;
    where: OfferWhereUniqueInput;
  }) => OfferPromise;
  updateManyOffers: (args: {
    data: OfferUpdateManyMutationInput;
    where?: OfferWhereInput;
  }) => BatchPayloadPromise;
  upsertOffer: (args: {
    where: OfferWhereUniqueInput;
    create: OfferCreateInput;
    update: OfferUpdateInput;
  }) => OfferPromise;
  deleteOffer: (where: OfferWhereUniqueInput) => OfferPromise;
  deleteManyOffers: (where?: OfferWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createTransaction: (data: TransactionCreateInput) => TransactionPromise;
  updateTransaction: (args: {
    data: TransactionUpdateInput;
    where: TransactionWhereUniqueInput;
  }) => TransactionPromise;
  updateManyTransactions: (args: {
    data: TransactionUpdateManyMutationInput;
    where?: TransactionWhereInput;
  }) => BatchPayloadPromise;
  upsertTransaction: (args: {
    where: TransactionWhereUniqueInput;
    create: TransactionCreateInput;
    update: TransactionUpdateInput;
  }) => TransactionPromise;
  deleteTransaction: (where: TransactionWhereUniqueInput) => TransactionPromise;
  deleteManyTransactions: (
    where?: TransactionWhereInput
  ) => BatchPayloadPromise;
  createTransactionType: (
    data: TransactionTypeCreateInput
  ) => TransactionTypePromise;
  updateTransactionType: (args: {
    data: TransactionTypeUpdateInput;
    where: TransactionTypeWhereUniqueInput;
  }) => TransactionTypePromise;
  updateManyTransactionTypes: (args: {
    data: TransactionTypeUpdateManyMutationInput;
    where?: TransactionTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertTransactionType: (args: {
    where: TransactionTypeWhereUniqueInput;
    create: TransactionTypeCreateInput;
    update: TransactionTypeUpdateInput;
  }) => TransactionTypePromise;
  deleteTransactionType: (
    where: TransactionTypeWhereUniqueInput
  ) => TransactionTypePromise;
  deleteManyTransactionTypes: (
    where?: TransactionTypeWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWallet: (data: WalletCreateInput) => WalletPromise;
  updateWallet: (args: {
    data: WalletUpdateInput;
    where: WalletWhereUniqueInput;
  }) => WalletPromise;
  upsertWallet: (args: {
    where: WalletWhereUniqueInput;
    create: WalletCreateInput;
    update: WalletUpdateInput;
  }) => WalletPromise;
  deleteWallet: (where: WalletWhereUniqueInput) => WalletPromise;
  deleteManyWallets: (where?: WalletWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  balance: (
    where?: BalanceSubscriptionWhereInput
  ) => BalanceSubscriptionPayloadSubscription;
  city: (
    where?: CitySubscriptionWhereInput
  ) => CitySubscriptionPayloadSubscription;
  claim: (
    where?: ClaimSubscriptionWhereInput
  ) => ClaimSubscriptionPayloadSubscription;
  emailTemplate: (
    where?: EmailTemplateSubscriptionWhereInput
  ) => EmailTemplateSubscriptionPayloadSubscription;
  invitation: (
    where?: InvitationSubscriptionWhereInput
  ) => InvitationSubscriptionPayloadSubscription;
  offer: (
    where?: OfferSubscriptionWhereInput
  ) => OfferSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  transaction: (
    where?: TransactionSubscriptionWhereInput
  ) => TransactionSubscriptionPayloadSubscription;
  transactionType: (
    where?: TransactionTypeSubscriptionWhereInput
  ) => TransactionTypeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  wallet: (
    where?: WalletSubscriptionWhereInput
  ) => WalletSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AssetOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type BalanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC";

export type CityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "available_ASC"
  | "available_DESC";

export type ClaimOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type EmailTemplateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "from_ASC"
  | "from_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "text_ASC"
  | "text_DESC"
  | "html_ASC"
  | "html_DESC";

export type InvitationType = "EMAIL" | "PERSONALLINK" | "GLOBALLINK";

export type IdentificationType = "LOGIN" | "SOCIAL";

export type RoleOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "identifier_ASC"
  | "identifier_DESC"
  | "identificationType_ASC"
  | "identificationType_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC";

export type InvitationState = "Invited" | "TemporaryAccount" | "Finished";

export type InvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "state_ASC"
  | "state_DESC";

export type OfferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "image_ASC"
  | "image_DESC"
  | "description_ASC"
  | "description_DESC"
  | "availabilityStarts_ASC"
  | "availabilityStarts_DESC"
  | "businessFunction_ASC"
  | "businessFunction_DESC"
  | "price_ASC"
  | "price_DESC"
  | "priceCurrency_ASC"
  | "priceCurrency_DESC"
  | "category_ASC"
  | "category_DESC"
  | "count_ASC"
  | "count_DESC";

export type TransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type TransactionTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type WalletOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AssetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  OR?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  NOT?: Maybe<AssetWhereInput[] | AssetWhereInput>;
}

export type BalanceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BalanceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  value_not?: Maybe<Int>;
  value_in?: Maybe<Int[] | Int>;
  value_not_in?: Maybe<Int[] | Int>;
  value_lt?: Maybe<Int>;
  value_lte?: Maybe<Int>;
  value_gt?: Maybe<Int>;
  value_gte?: Maybe<Int>;
  asset?: Maybe<AssetWhereInput>;
  AND?: Maybe<BalanceWhereInput[] | BalanceWhereInput>;
  OR?: Maybe<BalanceWhereInput[] | BalanceWhereInput>;
  NOT?: Maybe<BalanceWhereInput[] | BalanceWhereInput>;
}

export type CityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface CityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  wallet?: Maybe<WalletWhereInput>;
  AND?: Maybe<CityWhereInput[] | CityWhereInput>;
  OR?: Maybe<CityWhereInput[] | CityWhereInput>;
  NOT?: Maybe<CityWhereInput[] | CityWhereInput>;
}

export interface WalletWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  balances_every?: Maybe<BalanceWhereInput>;
  balances_some?: Maybe<BalanceWhereInput>;
  balances_none?: Maybe<BalanceWhereInput>;
  AND?: Maybe<WalletWhereInput[] | WalletWhereInput>;
  OR?: Maybe<WalletWhereInput[] | WalletWhereInput>;
  NOT?: Maybe<WalletWhereInput[] | WalletWhereInput>;
}

export type ClaimWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ClaimWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClaimWhereInput[] | ClaimWhereInput>;
  OR?: Maybe<ClaimWhereInput[] | ClaimWhereInput>;
  NOT?: Maybe<ClaimWhereInput[] | ClaimWhereInput>;
}

export type EmailTemplateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface EmailTemplateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  html?: Maybe<String>;
  html_not?: Maybe<String>;
  html_in?: Maybe<String[] | String>;
  html_not_in?: Maybe<String[] | String>;
  html_lt?: Maybe<String>;
  html_lte?: Maybe<String>;
  html_gt?: Maybe<String>;
  html_gte?: Maybe<String>;
  html_contains?: Maybe<String>;
  html_not_contains?: Maybe<String>;
  html_starts_with?: Maybe<String>;
  html_not_starts_with?: Maybe<String>;
  html_ends_with?: Maybe<String>;
  html_not_ends_with?: Maybe<String>;
  AND?: Maybe<EmailTemplateWhereInput[] | EmailTemplateWhereInput>;
  OR?: Maybe<EmailTemplateWhereInput[] | EmailTemplateWhereInput>;
  NOT?: Maybe<EmailTemplateWhereInput[] | EmailTemplateWhereInput>;
}

export type InvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  claims_every?: Maybe<ClaimWhereInput>;
  claims_some?: Maybe<ClaimWhereInput>;
  claims_none?: Maybe<ClaimWhereInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  identifier?: Maybe<String>;
  identifier_not?: Maybe<String>;
  identifier_in?: Maybe<String[] | String>;
  identifier_not_in?: Maybe<String[] | String>;
  identifier_lt?: Maybe<String>;
  identifier_lte?: Maybe<String>;
  identifier_gt?: Maybe<String>;
  identifier_gte?: Maybe<String>;
  identifier_contains?: Maybe<String>;
  identifier_not_contains?: Maybe<String>;
  identifier_starts_with?: Maybe<String>;
  identifier_not_starts_with?: Maybe<String>;
  identifier_ends_with?: Maybe<String>;
  identifier_not_ends_with?: Maybe<String>;
  identificationType?: Maybe<IdentificationType>;
  identificationType_not?: Maybe<IdentificationType>;
  identificationType_in?: Maybe<IdentificationType[] | IdentificationType>;
  identificationType_not_in?: Maybe<IdentificationType[] | IdentificationType>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  city?: Maybe<CityWhereInput>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  wallet?: Maybe<WalletWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface InvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<InvitationType>;
  type_not?: Maybe<InvitationType>;
  type_in?: Maybe<InvitationType[] | InvitationType>;
  type_not_in?: Maybe<InvitationType[] | InvitationType>;
  invitedBy?: Maybe<UserWhereInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  city?: Maybe<CityWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  invited_every?: Maybe<UserWhereInput>;
  invited_some?: Maybe<UserWhereInput>;
  invited_none?: Maybe<UserWhereInput>;
  state?: Maybe<InvitationState>;
  state_not?: Maybe<InvitationState>;
  state_in?: Maybe<InvitationState[] | InvitationState>;
  state_not_in?: Maybe<InvitationState[] | InvitationState>;
  AND?: Maybe<InvitationWhereInput[] | InvitationWhereInput>;
  OR?: Maybe<InvitationWhereInput[] | InvitationWhereInput>;
  NOT?: Maybe<InvitationWhereInput[] | InvitationWhereInput>;
}

export type OfferWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OfferWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  availabilityStarts?: Maybe<String>;
  availabilityStarts_not?: Maybe<String>;
  availabilityStarts_in?: Maybe<String[] | String>;
  availabilityStarts_not_in?: Maybe<String[] | String>;
  availabilityStarts_lt?: Maybe<String>;
  availabilityStarts_lte?: Maybe<String>;
  availabilityStarts_gt?: Maybe<String>;
  availabilityStarts_gte?: Maybe<String>;
  availabilityStarts_contains?: Maybe<String>;
  availabilityStarts_not_contains?: Maybe<String>;
  availabilityStarts_starts_with?: Maybe<String>;
  availabilityStarts_not_starts_with?: Maybe<String>;
  availabilityStarts_ends_with?: Maybe<String>;
  availabilityStarts_not_ends_with?: Maybe<String>;
  businessFunction?: Maybe<String>;
  businessFunction_not?: Maybe<String>;
  businessFunction_in?: Maybe<String[] | String>;
  businessFunction_not_in?: Maybe<String[] | String>;
  businessFunction_lt?: Maybe<String>;
  businessFunction_lte?: Maybe<String>;
  businessFunction_gt?: Maybe<String>;
  businessFunction_gte?: Maybe<String>;
  businessFunction_contains?: Maybe<String>;
  businessFunction_not_contains?: Maybe<String>;
  businessFunction_starts_with?: Maybe<String>;
  businessFunction_not_starts_with?: Maybe<String>;
  businessFunction_ends_with?: Maybe<String>;
  businessFunction_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  priceCurrency?: Maybe<String>;
  priceCurrency_not?: Maybe<String>;
  priceCurrency_in?: Maybe<String[] | String>;
  priceCurrency_not_in?: Maybe<String[] | String>;
  priceCurrency_lt?: Maybe<String>;
  priceCurrency_lte?: Maybe<String>;
  priceCurrency_gt?: Maybe<String>;
  priceCurrency_gte?: Maybe<String>;
  priceCurrency_contains?: Maybe<String>;
  priceCurrency_not_contains?: Maybe<String>;
  priceCurrency_starts_with?: Maybe<String>;
  priceCurrency_not_starts_with?: Maybe<String>;
  priceCurrency_ends_with?: Maybe<String>;
  priceCurrency_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  AND?: Maybe<OfferWhereInput[] | OfferWhereInput>;
  OR?: Maybe<OfferWhereInput[] | OfferWhereInput>;
  NOT?: Maybe<OfferWhereInput[] | OfferWhereInput>;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type TransactionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TransactionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  input?: Maybe<WalletWhereInput>;
  output?: Maybe<WalletWhereInput>;
  operation?: Maybe<TransactionTypeWhereInput>;
  asset?: Maybe<AssetWhereInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
  OR?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
  NOT?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
}

export interface TransactionTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<TransactionTypeWhereInput[] | TransactionTypeWhereInput>;
  OR?: Maybe<TransactionTypeWhereInput[] | TransactionTypeWhereInput>;
  NOT?: Maybe<TransactionTypeWhereInput[] | TransactionTypeWhereInput>;
}

export type TransactionTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  identifier?: Maybe<String>;
}>;

export type WalletWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AssetCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface AssetUpdateInput {
  name?: Maybe<String>;
}

export interface AssetUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface BalanceCreateInput {
  id?: Maybe<ID_Input>;
  value: Int;
  asset: AssetCreateOneInput;
}

export interface AssetCreateOneInput {
  create?: Maybe<AssetCreateInput>;
  connect?: Maybe<AssetWhereUniqueInput>;
}

export interface BalanceUpdateInput {
  value?: Maybe<Int>;
  asset?: Maybe<AssetUpdateOneRequiredInput>;
}

export interface AssetUpdateOneRequiredInput {
  create?: Maybe<AssetCreateInput>;
  update?: Maybe<AssetUpdateDataInput>;
  upsert?: Maybe<AssetUpsertNestedInput>;
  connect?: Maybe<AssetWhereUniqueInput>;
}

export interface AssetUpdateDataInput {
  name?: Maybe<String>;
}

export interface AssetUpsertNestedInput {
  update: AssetUpdateDataInput;
  create: AssetCreateInput;
}

export interface BalanceUpdateManyMutationInput {
  value?: Maybe<Int>;
}

export interface CityCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  available: Boolean;
  wallet: WalletCreateOneInput;
}

export interface WalletCreateOneInput {
  create?: Maybe<WalletCreateInput>;
  connect?: Maybe<WalletWhereUniqueInput>;
}

export interface WalletCreateInput {
  id?: Maybe<ID_Input>;
  balances?: Maybe<BalanceCreateManyInput>;
}

export interface BalanceCreateManyInput {
  create?: Maybe<BalanceCreateInput[] | BalanceCreateInput>;
  connect?: Maybe<BalanceWhereUniqueInput[] | BalanceWhereUniqueInput>;
}

export interface CityUpdateInput {
  name?: Maybe<String>;
  available?: Maybe<Boolean>;
  wallet?: Maybe<WalletUpdateOneRequiredInput>;
}

export interface WalletUpdateOneRequiredInput {
  create?: Maybe<WalletCreateInput>;
  update?: Maybe<WalletUpdateDataInput>;
  upsert?: Maybe<WalletUpsertNestedInput>;
  connect?: Maybe<WalletWhereUniqueInput>;
}

export interface WalletUpdateDataInput {
  balances?: Maybe<BalanceUpdateManyInput>;
}

export interface BalanceUpdateManyInput {
  create?: Maybe<BalanceCreateInput[] | BalanceCreateInput>;
  update?: Maybe<
    | BalanceUpdateWithWhereUniqueNestedInput[]
    | BalanceUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | BalanceUpsertWithWhereUniqueNestedInput[]
    | BalanceUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<BalanceWhereUniqueInput[] | BalanceWhereUniqueInput>;
  connect?: Maybe<BalanceWhereUniqueInput[] | BalanceWhereUniqueInput>;
  set?: Maybe<BalanceWhereUniqueInput[] | BalanceWhereUniqueInput>;
  disconnect?: Maybe<BalanceWhereUniqueInput[] | BalanceWhereUniqueInput>;
  deleteMany?: Maybe<BalanceScalarWhereInput[] | BalanceScalarWhereInput>;
  updateMany?: Maybe<
    | BalanceUpdateManyWithWhereNestedInput[]
    | BalanceUpdateManyWithWhereNestedInput
  >;
}

export interface BalanceUpdateWithWhereUniqueNestedInput {
  where: BalanceWhereUniqueInput;
  data: BalanceUpdateDataInput;
}

export interface BalanceUpdateDataInput {
  value?: Maybe<Int>;
  asset?: Maybe<AssetUpdateOneRequiredInput>;
}

export interface BalanceUpsertWithWhereUniqueNestedInput {
  where: BalanceWhereUniqueInput;
  update: BalanceUpdateDataInput;
  create: BalanceCreateInput;
}

export interface BalanceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  value_not?: Maybe<Int>;
  value_in?: Maybe<Int[] | Int>;
  value_not_in?: Maybe<Int[] | Int>;
  value_lt?: Maybe<Int>;
  value_lte?: Maybe<Int>;
  value_gt?: Maybe<Int>;
  value_gte?: Maybe<Int>;
  AND?: Maybe<BalanceScalarWhereInput[] | BalanceScalarWhereInput>;
  OR?: Maybe<BalanceScalarWhereInput[] | BalanceScalarWhereInput>;
  NOT?: Maybe<BalanceScalarWhereInput[] | BalanceScalarWhereInput>;
}

export interface BalanceUpdateManyWithWhereNestedInput {
  where: BalanceScalarWhereInput;
  data: BalanceUpdateManyDataInput;
}

export interface BalanceUpdateManyDataInput {
  value?: Maybe<Int>;
}

export interface WalletUpsertNestedInput {
  update: WalletUpdateDataInput;
  create: WalletCreateInput;
}

export interface CityUpdateManyMutationInput {
  name?: Maybe<String>;
  available?: Maybe<Boolean>;
}

export interface ClaimCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
}

export interface ClaimUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ClaimUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface EmailTemplateCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  from: String;
  subject: String;
  text?: Maybe<String>;
  html?: Maybe<String>;
}

export interface EmailTemplateUpdateInput {
  name?: Maybe<String>;
  from?: Maybe<String>;
  subject?: Maybe<String>;
  text?: Maybe<String>;
  html?: Maybe<String>;
}

export interface EmailTemplateUpdateManyMutationInput {
  name?: Maybe<String>;
  from?: Maybe<String>;
  subject?: Maybe<String>;
  text?: Maybe<String>;
  html?: Maybe<String>;
}

export interface InvitationCreateInput {
  id?: Maybe<ID_Input>;
  type: InvitationType;
  invitedBy: UserCreateOneInput;
  email?: Maybe<String>;
  name?: Maybe<String>;
  city?: Maybe<CityCreateOneInput>;
  invited?: Maybe<UserCreateManyInput>;
  state: InvitationState;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  identifier: String;
  identificationType: IdentificationType;
  password?: Maybe<String>;
  name?: Maybe<String>;
  city?: Maybe<CityCreateOneInput>;
  roles?: Maybe<RoleCreateManyInput>;
  wallet: WalletCreateOneInput;
}

export interface CityCreateOneInput {
  create?: Maybe<CityCreateInput>;
  connect?: Maybe<CityWhereUniqueInput>;
}

export interface RoleCreateManyInput {
  create?: Maybe<RoleCreateInput[] | RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  claims?: Maybe<ClaimCreateManyInput>;
}

export interface ClaimCreateManyInput {
  create?: Maybe<ClaimCreateInput[] | ClaimCreateInput>;
  connect?: Maybe<ClaimWhereUniqueInput[] | ClaimWhereUniqueInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface InvitationUpdateInput {
  type?: Maybe<InvitationType>;
  invitedBy?: Maybe<UserUpdateOneRequiredInput>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  city?: Maybe<CityUpdateOneInput>;
  invited?: Maybe<UserUpdateManyInput>;
  state?: Maybe<InvitationState>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  identifier?: Maybe<String>;
  identificationType?: Maybe<IdentificationType>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  city?: Maybe<CityUpdateOneInput>;
  roles?: Maybe<RoleUpdateManyInput>;
  wallet?: Maybe<WalletUpdateOneRequiredInput>;
}

export interface CityUpdateOneInput {
  create?: Maybe<CityCreateInput>;
  update?: Maybe<CityUpdateDataInput>;
  upsert?: Maybe<CityUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CityWhereUniqueInput>;
}

export interface CityUpdateDataInput {
  name?: Maybe<String>;
  available?: Maybe<Boolean>;
  wallet?: Maybe<WalletUpdateOneRequiredInput>;
}

export interface CityUpsertNestedInput {
  update: CityUpdateDataInput;
  create: CityCreateInput;
}

export interface RoleUpdateManyInput {
  create?: Maybe<RoleCreateInput[] | RoleCreateInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueNestedInput[]
    | RoleUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueNestedInput[]
    | RoleUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateDataInput;
}

export interface RoleUpdateDataInput {
  name?: Maybe<String>;
  claims?: Maybe<ClaimUpdateManyInput>;
}

export interface ClaimUpdateManyInput {
  create?: Maybe<ClaimCreateInput[] | ClaimCreateInput>;
  update?: Maybe<
    | ClaimUpdateWithWhereUniqueNestedInput[]
    | ClaimUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ClaimUpsertWithWhereUniqueNestedInput[]
    | ClaimUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ClaimWhereUniqueInput[] | ClaimWhereUniqueInput>;
  connect?: Maybe<ClaimWhereUniqueInput[] | ClaimWhereUniqueInput>;
  set?: Maybe<ClaimWhereUniqueInput[] | ClaimWhereUniqueInput>;
  disconnect?: Maybe<ClaimWhereUniqueInput[] | ClaimWhereUniqueInput>;
  deleteMany?: Maybe<ClaimScalarWhereInput[] | ClaimScalarWhereInput>;
  updateMany?: Maybe<
    ClaimUpdateManyWithWhereNestedInput[] | ClaimUpdateManyWithWhereNestedInput
  >;
}

export interface ClaimUpdateWithWhereUniqueNestedInput {
  where: ClaimWhereUniqueInput;
  data: ClaimUpdateDataInput;
}

export interface ClaimUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ClaimUpsertWithWhereUniqueNestedInput {
  where: ClaimWhereUniqueInput;
  update: ClaimUpdateDataInput;
  create: ClaimCreateInput;
}

export interface ClaimScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClaimScalarWhereInput[] | ClaimScalarWhereInput>;
  OR?: Maybe<ClaimScalarWhereInput[] | ClaimScalarWhereInput>;
  NOT?: Maybe<ClaimScalarWhereInput[] | ClaimScalarWhereInput>;
}

export interface ClaimUpdateManyWithWhereNestedInput {
  where: ClaimScalarWhereInput;
  data: ClaimUpdateManyDataInput;
}

export interface ClaimUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface RoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  OR?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  NOT?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
}

export interface RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput;
  data: RoleUpdateManyDataInput;
}

export interface RoleUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  identifier?: Maybe<String>;
  identifier_not?: Maybe<String>;
  identifier_in?: Maybe<String[] | String>;
  identifier_not_in?: Maybe<String[] | String>;
  identifier_lt?: Maybe<String>;
  identifier_lte?: Maybe<String>;
  identifier_gt?: Maybe<String>;
  identifier_gte?: Maybe<String>;
  identifier_contains?: Maybe<String>;
  identifier_not_contains?: Maybe<String>;
  identifier_starts_with?: Maybe<String>;
  identifier_not_starts_with?: Maybe<String>;
  identifier_ends_with?: Maybe<String>;
  identifier_not_ends_with?: Maybe<String>;
  identificationType?: Maybe<IdentificationType>;
  identificationType_not?: Maybe<IdentificationType>;
  identificationType_in?: Maybe<IdentificationType[] | IdentificationType>;
  identificationType_not_in?: Maybe<IdentificationType[] | IdentificationType>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  identifier?: Maybe<String>;
  identificationType?: Maybe<IdentificationType>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface InvitationUpdateManyMutationInput {
  type?: Maybe<InvitationType>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  state?: Maybe<InvitationState>;
}

export interface OfferCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  image: String;
  description?: Maybe<String>;
  availabilityStarts?: Maybe<String>;
  businessFunction?: Maybe<String>;
  price?: Maybe<Float>;
  priceCurrency?: Maybe<String>;
  category?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface OfferUpdateInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
  availabilityStarts?: Maybe<String>;
  businessFunction?: Maybe<String>;
  price?: Maybe<Float>;
  priceCurrency?: Maybe<String>;
  category?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface OfferUpdateManyMutationInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
  availabilityStarts?: Maybe<String>;
  businessFunction?: Maybe<String>;
  price?: Maybe<Float>;
  priceCurrency?: Maybe<String>;
  category?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface RoleUpdateInput {
  name?: Maybe<String>;
  claims?: Maybe<ClaimUpdateManyInput>;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TransactionCreateInput {
  id?: Maybe<ID_Input>;
  input: WalletCreateOneInput;
  output: WalletCreateOneInput;
  operation: TransactionTypeCreateOneInput;
  asset: AssetCreateOneInput;
  amount: Int;
}

export interface TransactionTypeCreateOneInput {
  create?: Maybe<TransactionTypeCreateInput>;
  connect?: Maybe<TransactionTypeWhereUniqueInput>;
}

export interface TransactionTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface TransactionUpdateInput {
  input?: Maybe<WalletUpdateOneRequiredInput>;
  output?: Maybe<WalletUpdateOneRequiredInput>;
  operation?: Maybe<TransactionTypeUpdateOneRequiredInput>;
  asset?: Maybe<AssetUpdateOneRequiredInput>;
  amount?: Maybe<Int>;
}

export interface TransactionTypeUpdateOneRequiredInput {
  create?: Maybe<TransactionTypeCreateInput>;
  update?: Maybe<TransactionTypeUpdateDataInput>;
  upsert?: Maybe<TransactionTypeUpsertNestedInput>;
  connect?: Maybe<TransactionTypeWhereUniqueInput>;
}

export interface TransactionTypeUpdateDataInput {
  name?: Maybe<String>;
}

export interface TransactionTypeUpsertNestedInput {
  update: TransactionTypeUpdateDataInput;
  create: TransactionTypeCreateInput;
}

export interface TransactionUpdateManyMutationInput {
  amount?: Maybe<Int>;
}

export interface TransactionTypeUpdateInput {
  name?: Maybe<String>;
}

export interface TransactionTypeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  identifier?: Maybe<String>;
  identificationType?: Maybe<IdentificationType>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  city?: Maybe<CityUpdateOneInput>;
  roles?: Maybe<RoleUpdateManyInput>;
  wallet?: Maybe<WalletUpdateOneRequiredInput>;
}

export interface UserUpdateManyMutationInput {
  identifier?: Maybe<String>;
  identificationType?: Maybe<IdentificationType>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface WalletUpdateInput {
  balances?: Maybe<BalanceUpdateManyInput>;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssetWhereInput>;
  AND?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  OR?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  NOT?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
}

export interface BalanceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BalanceWhereInput>;
  AND?: Maybe<BalanceSubscriptionWhereInput[] | BalanceSubscriptionWhereInput>;
  OR?: Maybe<BalanceSubscriptionWhereInput[] | BalanceSubscriptionWhereInput>;
  NOT?: Maybe<BalanceSubscriptionWhereInput[] | BalanceSubscriptionWhereInput>;
}

export interface CitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CityWhereInput>;
  AND?: Maybe<CitySubscriptionWhereInput[] | CitySubscriptionWhereInput>;
  OR?: Maybe<CitySubscriptionWhereInput[] | CitySubscriptionWhereInput>;
  NOT?: Maybe<CitySubscriptionWhereInput[] | CitySubscriptionWhereInput>;
}

export interface ClaimSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClaimWhereInput>;
  AND?: Maybe<ClaimSubscriptionWhereInput[] | ClaimSubscriptionWhereInput>;
  OR?: Maybe<ClaimSubscriptionWhereInput[] | ClaimSubscriptionWhereInput>;
  NOT?: Maybe<ClaimSubscriptionWhereInput[] | ClaimSubscriptionWhereInput>;
}

export interface EmailTemplateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailTemplateWhereInput>;
  AND?: Maybe<
    EmailTemplateSubscriptionWhereInput[] | EmailTemplateSubscriptionWhereInput
  >;
  OR?: Maybe<
    EmailTemplateSubscriptionWhereInput[] | EmailTemplateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EmailTemplateSubscriptionWhereInput[] | EmailTemplateSubscriptionWhereInput
  >;
}

export interface InvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InvitationWhereInput>;
  AND?: Maybe<
    InvitationSubscriptionWhereInput[] | InvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    InvitationSubscriptionWhereInput[] | InvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InvitationSubscriptionWhereInput[] | InvitationSubscriptionWhereInput
  >;
}

export interface OfferSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OfferWhereInput>;
  AND?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>;
  OR?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>;
  NOT?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface TransactionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TransactionWhereInput>;
  AND?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
  OR?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
}

export interface TransactionTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TransactionTypeWhereInput>;
  AND?: Maybe<
    | TransactionTypeSubscriptionWhereInput[]
    | TransactionTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | TransactionTypeSubscriptionWhereInput[]
    | TransactionTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | TransactionTypeSubscriptionWhereInput[]
    | TransactionTypeSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WalletSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WalletWhereInput>;
  AND?: Maybe<WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput>;
  OR?: Maybe<WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput>;
  NOT?: Maybe<WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Asset {
  id: ID_Output;
  name: String;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AssetNullablePromise
  extends Promise<Asset | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Balance {
  id: ID_Output;
  value: Int;
}

export interface BalancePromise extends Promise<Balance>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  asset: <T = AssetPromise>() => T;
}

export interface BalanceSubscription
  extends Promise<AsyncIterator<Balance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  asset: <T = AssetSubscription>() => T;
}

export interface BalanceNullablePromise
  extends Promise<Balance | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  asset: <T = AssetPromise>() => T;
}

export interface BalanceConnection {
  pageInfo: PageInfo;
  edges: BalanceEdge[];
}

export interface BalanceConnectionPromise
  extends Promise<BalanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BalanceEdge>>() => T;
  aggregate: <T = AggregateBalancePromise>() => T;
}

export interface BalanceConnectionSubscription
  extends Promise<AsyncIterator<BalanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BalanceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBalanceSubscription>() => T;
}

export interface BalanceEdge {
  node: Balance;
  cursor: String;
}

export interface BalanceEdgePromise extends Promise<BalanceEdge>, Fragmentable {
  node: <T = BalancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface BalanceEdgeSubscription
  extends Promise<AsyncIterator<BalanceEdge>>,
    Fragmentable {
  node: <T = BalanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBalance {
  count: Int;
}

export interface AggregateBalancePromise
  extends Promise<AggregateBalance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBalanceSubscription
  extends Promise<AsyncIterator<AggregateBalance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface City {
  id: ID_Output;
  name: String;
  available: Boolean;
}

export interface CityPromise extends Promise<City>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  available: () => Promise<Boolean>;
  wallet: <T = WalletPromise>() => T;
}

export interface CitySubscription
  extends Promise<AsyncIterator<City>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  wallet: <T = WalletSubscription>() => T;
}

export interface CityNullablePromise
  extends Promise<City | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  available: () => Promise<Boolean>;
  wallet: <T = WalletPromise>() => T;
}

export interface Wallet {
  id: ID_Output;
}

export interface WalletPromise extends Promise<Wallet>, Fragmentable {
  id: () => Promise<ID_Output>;
  balances: <T = FragmentableArray<Balance>>(args?: {
    where?: BalanceWhereInput;
    orderBy?: BalanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WalletSubscription
  extends Promise<AsyncIterator<Wallet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  balances: <T = Promise<AsyncIterator<BalanceSubscription>>>(args?: {
    where?: BalanceWhereInput;
    orderBy?: BalanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WalletNullablePromise
  extends Promise<Wallet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  balances: <T = FragmentableArray<Balance>>(args?: {
    where?: BalanceWhereInput;
    orderBy?: BalanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CityConnection {
  pageInfo: PageInfo;
  edges: CityEdge[];
}

export interface CityConnectionPromise
  extends Promise<CityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CityEdge>>() => T;
  aggregate: <T = AggregateCityPromise>() => T;
}

export interface CityConnectionSubscription
  extends Promise<AsyncIterator<CityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCitySubscription>() => T;
}

export interface CityEdge {
  node: City;
  cursor: String;
}

export interface CityEdgePromise extends Promise<CityEdge>, Fragmentable {
  node: <T = CityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CityEdgeSubscription
  extends Promise<AsyncIterator<CityEdge>>,
    Fragmentable {
  node: <T = CitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCity {
  count: Int;
}

export interface AggregateCityPromise
  extends Promise<AggregateCity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCitySubscription
  extends Promise<AsyncIterator<AggregateCity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Claim {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface ClaimPromise extends Promise<Claim>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClaimSubscription
  extends Promise<AsyncIterator<Claim>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ClaimNullablePromise
  extends Promise<Claim | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClaimConnection {
  pageInfo: PageInfo;
  edges: ClaimEdge[];
}

export interface ClaimConnectionPromise
  extends Promise<ClaimConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClaimEdge>>() => T;
  aggregate: <T = AggregateClaimPromise>() => T;
}

export interface ClaimConnectionSubscription
  extends Promise<AsyncIterator<ClaimConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClaimEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClaimSubscription>() => T;
}

export interface ClaimEdge {
  node: Claim;
  cursor: String;
}

export interface ClaimEdgePromise extends Promise<ClaimEdge>, Fragmentable {
  node: <T = ClaimPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClaimEdgeSubscription
  extends Promise<AsyncIterator<ClaimEdge>>,
    Fragmentable {
  node: <T = ClaimSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClaim {
  count: Int;
}

export interface AggregateClaimPromise
  extends Promise<AggregateClaim>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClaimSubscription
  extends Promise<AsyncIterator<AggregateClaim>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailTemplate {
  id: ID_Output;
  name: String;
  from: String;
  subject: String;
  text?: String;
  html?: String;
}

export interface EmailTemplatePromise
  extends Promise<EmailTemplate>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  from: () => Promise<String>;
  subject: () => Promise<String>;
  text: () => Promise<String>;
  html: () => Promise<String>;
}

export interface EmailTemplateSubscription
  extends Promise<AsyncIterator<EmailTemplate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  subject: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  html: () => Promise<AsyncIterator<String>>;
}

export interface EmailTemplateNullablePromise
  extends Promise<EmailTemplate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  from: () => Promise<String>;
  subject: () => Promise<String>;
  text: () => Promise<String>;
  html: () => Promise<String>;
}

export interface EmailTemplateConnection {
  pageInfo: PageInfo;
  edges: EmailTemplateEdge[];
}

export interface EmailTemplateConnectionPromise
  extends Promise<EmailTemplateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailTemplateEdge>>() => T;
  aggregate: <T = AggregateEmailTemplatePromise>() => T;
}

export interface EmailTemplateConnectionSubscription
  extends Promise<AsyncIterator<EmailTemplateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailTemplateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailTemplateSubscription>() => T;
}

export interface EmailTemplateEdge {
  node: EmailTemplate;
  cursor: String;
}

export interface EmailTemplateEdgePromise
  extends Promise<EmailTemplateEdge>,
    Fragmentable {
  node: <T = EmailTemplatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailTemplateEdgeSubscription
  extends Promise<AsyncIterator<EmailTemplateEdge>>,
    Fragmentable {
  node: <T = EmailTemplateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmailTemplate {
  count: Int;
}

export interface AggregateEmailTemplatePromise
  extends Promise<AggregateEmailTemplate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailTemplateSubscription
  extends Promise<AsyncIterator<AggregateEmailTemplate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Invitation {
  id: ID_Output;
  type: InvitationType;
  email?: String;
  name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  state: InvitationState;
}

export interface InvitationPromise extends Promise<Invitation>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InvitationType>;
  invitedBy: <T = UserPromise>() => T;
  email: () => Promise<String>;
  name: () => Promise<String>;
  city: <T = CityPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  invited: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  state: () => Promise<InvitationState>;
}

export interface InvitationSubscription
  extends Promise<AsyncIterator<Invitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<InvitationType>>;
  invitedBy: <T = UserSubscription>() => T;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  city: <T = CitySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  invited: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  state: () => Promise<AsyncIterator<InvitationState>>;
}

export interface InvitationNullablePromise
  extends Promise<Invitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InvitationType>;
  invitedBy: <T = UserPromise>() => T;
  email: () => Promise<String>;
  name: () => Promise<String>;
  city: <T = CityPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  invited: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  state: () => Promise<InvitationState>;
}

export interface User {
  id: ID_Output;
  identifier: String;
  identificationType: IdentificationType;
  password?: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  identifier: () => Promise<String>;
  identificationType: () => Promise<IdentificationType>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  city: <T = CityPromise>() => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wallet: <T = WalletPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  identifier: () => Promise<AsyncIterator<String>>;
  identificationType: () => Promise<AsyncIterator<IdentificationType>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  city: <T = CitySubscription>() => T;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wallet: <T = WalletSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  identifier: () => Promise<String>;
  identificationType: () => Promise<IdentificationType>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  city: <T = CityPromise>() => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wallet: <T = WalletPromise>() => T;
}

export interface Role {
  id: ID_Output;
  name: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  claims: <T = FragmentableArray<Claim>>(args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  claims: <T = Promise<AsyncIterator<ClaimSubscription>>>(args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  claims: <T = FragmentableArray<Claim>>(args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InvitationConnection {
  pageInfo: PageInfo;
  edges: InvitationEdge[];
}

export interface InvitationConnectionPromise
  extends Promise<InvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InvitationEdge>>() => T;
  aggregate: <T = AggregateInvitationPromise>() => T;
}

export interface InvitationConnectionSubscription
  extends Promise<AsyncIterator<InvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInvitationSubscription>() => T;
}

export interface InvitationEdge {
  node: Invitation;
  cursor: String;
}

export interface InvitationEdgePromise
  extends Promise<InvitationEdge>,
    Fragmentable {
  node: <T = InvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InvitationEdgeSubscription
  extends Promise<AsyncIterator<InvitationEdge>>,
    Fragmentable {
  node: <T = InvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInvitation {
  count: Int;
}

export interface AggregateInvitationPromise
  extends Promise<AggregateInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvitationSubscription
  extends Promise<AsyncIterator<AggregateInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Offer {
  id: ID_Output;
  name: String;
  image: String;
  description?: String;
  availabilityStarts?: String;
  businessFunction?: String;
  price?: Float;
  priceCurrency?: String;
  category?: String;
  count?: Int;
}

export interface OfferPromise extends Promise<Offer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  description: () => Promise<String>;
  availabilityStarts: () => Promise<String>;
  businessFunction: () => Promise<String>;
  price: () => Promise<Float>;
  priceCurrency: () => Promise<String>;
  category: () => Promise<String>;
  count: () => Promise<Int>;
}

export interface OfferSubscription
  extends Promise<AsyncIterator<Offer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  availabilityStarts: () => Promise<AsyncIterator<String>>;
  businessFunction: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  priceCurrency: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OfferNullablePromise
  extends Promise<Offer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  description: () => Promise<String>;
  availabilityStarts: () => Promise<String>;
  businessFunction: () => Promise<String>;
  price: () => Promise<Float>;
  priceCurrency: () => Promise<String>;
  category: () => Promise<String>;
  count: () => Promise<Int>;
}

export interface OfferConnection {
  pageInfo: PageInfo;
  edges: OfferEdge[];
}

export interface OfferConnectionPromise
  extends Promise<OfferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferEdge>>() => T;
  aggregate: <T = AggregateOfferPromise>() => T;
}

export interface OfferConnectionSubscription
  extends Promise<AsyncIterator<OfferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferSubscription>() => T;
}

export interface OfferEdge {
  node: Offer;
  cursor: String;
}

export interface OfferEdgePromise extends Promise<OfferEdge>, Fragmentable {
  node: <T = OfferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferEdgeSubscription
  extends Promise<AsyncIterator<OfferEdge>>,
    Fragmentable {
  node: <T = OfferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOffer {
  count: Int;
}

export interface AggregateOfferPromise
  extends Promise<AggregateOffer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferSubscription
  extends Promise<AsyncIterator<AggregateOffer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Transaction {
  id: ID_Output;
  amount: Int;
}

export interface TransactionPromise extends Promise<Transaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  input: <T = WalletPromise>() => T;
  output: <T = WalletPromise>() => T;
  operation: <T = TransactionTypePromise>() => T;
  asset: <T = AssetPromise>() => T;
  amount: () => Promise<Int>;
}

export interface TransactionSubscription
  extends Promise<AsyncIterator<Transaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  input: <T = WalletSubscription>() => T;
  output: <T = WalletSubscription>() => T;
  operation: <T = TransactionTypeSubscription>() => T;
  asset: <T = AssetSubscription>() => T;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface TransactionNullablePromise
  extends Promise<Transaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  input: <T = WalletPromise>() => T;
  output: <T = WalletPromise>() => T;
  operation: <T = TransactionTypePromise>() => T;
  asset: <T = AssetPromise>() => T;
  amount: () => Promise<Int>;
}

export interface TransactionType {
  id: ID_Output;
  name: String;
}

export interface TransactionTypePromise
  extends Promise<TransactionType>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TransactionTypeSubscription
  extends Promise<AsyncIterator<TransactionType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TransactionTypeNullablePromise
  extends Promise<TransactionType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TransactionConnection {
  pageInfo: PageInfo;
  edges: TransactionEdge[];
}

export interface TransactionConnectionPromise
  extends Promise<TransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionEdge>>() => T;
  aggregate: <T = AggregateTransactionPromise>() => T;
}

export interface TransactionConnectionSubscription
  extends Promise<AsyncIterator<TransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionSubscription>() => T;
}

export interface TransactionEdge {
  node: Transaction;
  cursor: String;
}

export interface TransactionEdgePromise
  extends Promise<TransactionEdge>,
    Fragmentable {
  node: <T = TransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionEdgeSubscription
  extends Promise<AsyncIterator<TransactionEdge>>,
    Fragmentable {
  node: <T = TransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTransaction {
  count: Int;
}

export interface AggregateTransactionPromise
  extends Promise<AggregateTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionSubscription
  extends Promise<AsyncIterator<AggregateTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TransactionTypeConnection {
  pageInfo: PageInfo;
  edges: TransactionTypeEdge[];
}

export interface TransactionTypeConnectionPromise
  extends Promise<TransactionTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionTypeEdge>>() => T;
  aggregate: <T = AggregateTransactionTypePromise>() => T;
}

export interface TransactionTypeConnectionSubscription
  extends Promise<AsyncIterator<TransactionTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionTypeSubscription>() => T;
}

export interface TransactionTypeEdge {
  node: TransactionType;
  cursor: String;
}

export interface TransactionTypeEdgePromise
  extends Promise<TransactionTypeEdge>,
    Fragmentable {
  node: <T = TransactionTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionTypeEdgeSubscription
  extends Promise<AsyncIterator<TransactionTypeEdge>>,
    Fragmentable {
  node: <T = TransactionTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTransactionType {
  count: Int;
}

export interface AggregateTransactionTypePromise
  extends Promise<AggregateTransactionType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionTypeSubscription
  extends Promise<AsyncIterator<AggregateTransactionType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WalletConnection {
  pageInfo: PageInfo;
  edges: WalletEdge[];
}

export interface WalletConnectionPromise
  extends Promise<WalletConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WalletEdge>>() => T;
  aggregate: <T = AggregateWalletPromise>() => T;
}

export interface WalletConnectionSubscription
  extends Promise<AsyncIterator<WalletConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WalletEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWalletSubscription>() => T;
}

export interface WalletEdge {
  node: Wallet;
  cursor: String;
}

export interface WalletEdgePromise extends Promise<WalletEdge>, Fragmentable {
  node: <T = WalletPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WalletEdgeSubscription
  extends Promise<AsyncIterator<WalletEdge>>,
    Fragmentable {
  node: <T = WalletSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWallet {
  count: Int;
}

export interface AggregateWalletPromise
  extends Promise<AggregateWallet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWalletSubscription
  extends Promise<AsyncIterator<AggregateWallet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AssetPreviousValues {
  id: ID_Output;
  name: String;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BalanceSubscriptionPayload {
  mutation: MutationType;
  node: Balance;
  updatedFields: String[];
  previousValues: BalancePreviousValues;
}

export interface BalanceSubscriptionPayloadPromise
  extends Promise<BalanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BalancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BalancePreviousValuesPromise>() => T;
}

export interface BalanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BalanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BalanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BalancePreviousValuesSubscription>() => T;
}

export interface BalancePreviousValues {
  id: ID_Output;
  value: Int;
}

export interface BalancePreviousValuesPromise
  extends Promise<BalancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
}

export interface BalancePreviousValuesSubscription
  extends Promise<AsyncIterator<BalancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
}

export interface CitySubscriptionPayload {
  mutation: MutationType;
  node: City;
  updatedFields: String[];
  previousValues: CityPreviousValues;
}

export interface CitySubscriptionPayloadPromise
  extends Promise<CitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CityPreviousValuesPromise>() => T;
}

export interface CitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CityPreviousValuesSubscription>() => T;
}

export interface CityPreviousValues {
  id: ID_Output;
  name: String;
  available: Boolean;
}

export interface CityPreviousValuesPromise
  extends Promise<CityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  available: () => Promise<Boolean>;
}

export interface CityPreviousValuesSubscription
  extends Promise<AsyncIterator<CityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClaimSubscriptionPayload {
  mutation: MutationType;
  node: Claim;
  updatedFields: String[];
  previousValues: ClaimPreviousValues;
}

export interface ClaimSubscriptionPayloadPromise
  extends Promise<ClaimSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClaimPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClaimPreviousValuesPromise>() => T;
}

export interface ClaimSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClaimSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClaimSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClaimPreviousValuesSubscription>() => T;
}

export interface ClaimPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface ClaimPreviousValuesPromise
  extends Promise<ClaimPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClaimPreviousValuesSubscription
  extends Promise<AsyncIterator<ClaimPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface EmailTemplateSubscriptionPayload {
  mutation: MutationType;
  node: EmailTemplate;
  updatedFields: String[];
  previousValues: EmailTemplatePreviousValues;
}

export interface EmailTemplateSubscriptionPayloadPromise
  extends Promise<EmailTemplateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailTemplatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailTemplatePreviousValuesPromise>() => T;
}

export interface EmailTemplateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailTemplateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailTemplateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailTemplatePreviousValuesSubscription>() => T;
}

export interface EmailTemplatePreviousValues {
  id: ID_Output;
  name: String;
  from: String;
  subject: String;
  text?: String;
  html?: String;
}

export interface EmailTemplatePreviousValuesPromise
  extends Promise<EmailTemplatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  from: () => Promise<String>;
  subject: () => Promise<String>;
  text: () => Promise<String>;
  html: () => Promise<String>;
}

export interface EmailTemplatePreviousValuesSubscription
  extends Promise<AsyncIterator<EmailTemplatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  subject: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  html: () => Promise<AsyncIterator<String>>;
}

export interface InvitationSubscriptionPayload {
  mutation: MutationType;
  node: Invitation;
  updatedFields: String[];
  previousValues: InvitationPreviousValues;
}

export interface InvitationSubscriptionPayloadPromise
  extends Promise<InvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvitationPreviousValuesPromise>() => T;
}

export interface InvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvitationPreviousValuesSubscription>() => T;
}

export interface InvitationPreviousValues {
  id: ID_Output;
  type: InvitationType;
  email?: String;
  name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  state: InvitationState;
}

export interface InvitationPreviousValuesPromise
  extends Promise<InvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InvitationType>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  state: () => Promise<InvitationState>;
}

export interface InvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<InvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<InvitationType>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  state: () => Promise<AsyncIterator<InvitationState>>;
}

export interface OfferSubscriptionPayload {
  mutation: MutationType;
  node: Offer;
  updatedFields: String[];
  previousValues: OfferPreviousValues;
}

export interface OfferSubscriptionPayloadPromise
  extends Promise<OfferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferPreviousValuesPromise>() => T;
}

export interface OfferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferPreviousValuesSubscription>() => T;
}

export interface OfferPreviousValues {
  id: ID_Output;
  name: String;
  image: String;
  description?: String;
  availabilityStarts?: String;
  businessFunction?: String;
  price?: Float;
  priceCurrency?: String;
  category?: String;
  count?: Int;
}

export interface OfferPreviousValuesPromise
  extends Promise<OfferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  description: () => Promise<String>;
  availabilityStarts: () => Promise<String>;
  businessFunction: () => Promise<String>;
  price: () => Promise<Float>;
  priceCurrency: () => Promise<String>;
  category: () => Promise<String>;
  count: () => Promise<Int>;
}

export interface OfferPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  availabilityStarts: () => Promise<AsyncIterator<String>>;
  businessFunction: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  priceCurrency: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TransactionSubscriptionPayload {
  mutation: MutationType;
  node: Transaction;
  updatedFields: String[];
  previousValues: TransactionPreviousValues;
}

export interface TransactionSubscriptionPayloadPromise
  extends Promise<TransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionPreviousValuesPromise>() => T;
}

export interface TransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionPreviousValuesSubscription>() => T;
}

export interface TransactionPreviousValues {
  id: ID_Output;
  amount: Int;
}

export interface TransactionPreviousValuesPromise
  extends Promise<TransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Int>;
}

export interface TransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface TransactionTypeSubscriptionPayload {
  mutation: MutationType;
  node: TransactionType;
  updatedFields: String[];
  previousValues: TransactionTypePreviousValues;
}

export interface TransactionTypeSubscriptionPayloadPromise
  extends Promise<TransactionTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionTypePreviousValuesPromise>() => T;
}

export interface TransactionTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionTypePreviousValuesSubscription>() => T;
}

export interface TransactionTypePreviousValues {
  id: ID_Output;
  name: String;
}

export interface TransactionTypePreviousValuesPromise
  extends Promise<TransactionTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TransactionTypePreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  identifier: String;
  identificationType: IdentificationType;
  password?: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  identifier: () => Promise<String>;
  identificationType: () => Promise<IdentificationType>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  identifier: () => Promise<AsyncIterator<String>>;
  identificationType: () => Promise<AsyncIterator<IdentificationType>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface WalletSubscriptionPayload {
  mutation: MutationType;
  node: Wallet;
  updatedFields: String[];
  previousValues: WalletPreviousValues;
}

export interface WalletSubscriptionPayloadPromise
  extends Promise<WalletSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WalletPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WalletPreviousValuesPromise>() => T;
}

export interface WalletSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WalletSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WalletSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WalletPreviousValuesSubscription>() => T;
}

export interface WalletPreviousValues {
  id: ID_Output;
}

export interface WalletPreviousValuesPromise
  extends Promise<WalletPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface WalletPreviousValuesSubscription
  extends Promise<AsyncIterator<WalletPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Claim",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "IdentificationType",
    embedded: false
  },
  {
    name: "City",
    embedded: false
  },
  {
    name: "Offer",
    embedded: false
  },
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "TransactionType",
    embedded: false
  },
  {
    name: "Balance",
    embedded: false
  },
  {
    name: "Wallet",
    embedded: false
  },
  {
    name: "Transaction",
    embedded: false
  },
  {
    name: "InvitationType",
    embedded: false
  },
  {
    name: "Invitation",
    embedded: false
  },
  {
    name: "InvitationState",
    embedded: false
  },
  {
    name: "EmailTemplate",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
