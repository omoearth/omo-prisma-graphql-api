"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeDefs = void 0;
// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/
var typeDefs =
/* GraphQL */
"type AggregateCity {\n  count: Int!\n}\n\ntype AggregateClaim {\n  count: Int!\n}\n\ntype AggregateRole {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  count: Long!\n}\n\ntype City {\n  id: ID!\n  name: String!\n  available: Boolean!\n  votes: Int\n}\n\ntype CityConnection {\n  pageInfo: PageInfo!\n  edges: [CityEdge]!\n  aggregate: AggregateCity!\n}\n\ninput CityCreateInput {\n  id: ID\n  name: String!\n  available: Boolean!\n  votes: Int\n}\n\ninput CityCreateOneInput {\n  create: CityCreateInput\n  connect: CityWhereUniqueInput\n}\n\ntype CityEdge {\n  node: City!\n  cursor: String!\n}\n\nenum CityOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  available_ASC\n  available_DESC\n  votes_ASC\n  votes_DESC\n}\n\ntype CityPreviousValues {\n  id: ID!\n  name: String!\n  available: Boolean!\n  votes: Int\n}\n\ntype CitySubscriptionPayload {\n  mutation: MutationType!\n  node: City\n  updatedFields: [String!]\n  previousValues: CityPreviousValues\n}\n\ninput CitySubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: CityWhereInput\n  AND: [CitySubscriptionWhereInput!]\n  OR: [CitySubscriptionWhereInput!]\n  NOT: [CitySubscriptionWhereInput!]\n}\n\ninput CityUpdateDataInput {\n  name: String\n  available: Boolean\n  votes: Int\n}\n\ninput CityUpdateInput {\n  name: String\n  available: Boolean\n  votes: Int\n}\n\ninput CityUpdateManyMutationInput {\n  name: String\n  available: Boolean\n  votes: Int\n}\n\ninput CityUpdateOneInput {\n  create: CityCreateInput\n  update: CityUpdateDataInput\n  upsert: CityUpsertNestedInput\n  delete: Boolean\n  disconnect: Boolean\n  connect: CityWhereUniqueInput\n}\n\ninput CityUpsertNestedInput {\n  update: CityUpdateDataInput!\n  create: CityCreateInput!\n}\n\ninput CityWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  available: Boolean\n  available_not: Boolean\n  votes: Int\n  votes_not: Int\n  votes_in: [Int!]\n  votes_not_in: [Int!]\n  votes_lt: Int\n  votes_lte: Int\n  votes_gt: Int\n  votes_gte: Int\n  AND: [CityWhereInput!]\n  OR: [CityWhereInput!]\n  NOT: [CityWhereInput!]\n}\n\ninput CityWhereUniqueInput {\n  id: ID\n  name: String\n}\n\ntype Claim {\n  id: ID!\n  name: String!\n  description: String\n}\n\ntype ClaimConnection {\n  pageInfo: PageInfo!\n  edges: [ClaimEdge]!\n  aggregate: AggregateClaim!\n}\n\ninput ClaimCreateInput {\n  id: ID\n  name: String!\n  description: String\n}\n\ninput ClaimCreateManyInput {\n  create: [ClaimCreateInput!]\n  connect: [ClaimWhereUniqueInput!]\n}\n\ntype ClaimEdge {\n  node: Claim!\n  cursor: String!\n}\n\nenum ClaimOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n  description_ASC\n  description_DESC\n}\n\ntype ClaimPreviousValues {\n  id: ID!\n  name: String!\n  description: String\n}\n\ninput ClaimScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  description: String\n  description_not: String\n  description_in: [String!]\n  description_not_in: [String!]\n  description_lt: String\n  description_lte: String\n  description_gt: String\n  description_gte: String\n  description_contains: String\n  description_not_contains: String\n  description_starts_with: String\n  description_not_starts_with: String\n  description_ends_with: String\n  description_not_ends_with: String\n  AND: [ClaimScalarWhereInput!]\n  OR: [ClaimScalarWhereInput!]\n  NOT: [ClaimScalarWhereInput!]\n}\n\ntype ClaimSubscriptionPayload {\n  mutation: MutationType!\n  node: Claim\n  updatedFields: [String!]\n  previousValues: ClaimPreviousValues\n}\n\ninput ClaimSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: ClaimWhereInput\n  AND: [ClaimSubscriptionWhereInput!]\n  OR: [ClaimSubscriptionWhereInput!]\n  NOT: [ClaimSubscriptionWhereInput!]\n}\n\ninput ClaimUpdateDataInput {\n  name: String\n  description: String\n}\n\ninput ClaimUpdateInput {\n  name: String\n  description: String\n}\n\ninput ClaimUpdateManyDataInput {\n  name: String\n  description: String\n}\n\ninput ClaimUpdateManyInput {\n  create: [ClaimCreateInput!]\n  update: [ClaimUpdateWithWhereUniqueNestedInput!]\n  upsert: [ClaimUpsertWithWhereUniqueNestedInput!]\n  delete: [ClaimWhereUniqueInput!]\n  connect: [ClaimWhereUniqueInput!]\n  set: [ClaimWhereUniqueInput!]\n  disconnect: [ClaimWhereUniqueInput!]\n  deleteMany: [ClaimScalarWhereInput!]\n  updateMany: [ClaimUpdateManyWithWhereNestedInput!]\n}\n\ninput ClaimUpdateManyMutationInput {\n  name: String\n  description: String\n}\n\ninput ClaimUpdateManyWithWhereNestedInput {\n  where: ClaimScalarWhereInput!\n  data: ClaimUpdateManyDataInput!\n}\n\ninput ClaimUpdateWithWhereUniqueNestedInput {\n  where: ClaimWhereUniqueInput!\n  data: ClaimUpdateDataInput!\n}\n\ninput ClaimUpsertWithWhereUniqueNestedInput {\n  where: ClaimWhereUniqueInput!\n  update: ClaimUpdateDataInput!\n  create: ClaimCreateInput!\n}\n\ninput ClaimWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  description: String\n  description_not: String\n  description_in: [String!]\n  description_not_in: [String!]\n  description_lt: String\n  description_lte: String\n  description_gt: String\n  description_gte: String\n  description_contains: String\n  description_not_contains: String\n  description_starts_with: String\n  description_not_starts_with: String\n  description_ends_with: String\n  description_not_ends_with: String\n  AND: [ClaimWhereInput!]\n  OR: [ClaimWhereInput!]\n  NOT: [ClaimWhereInput!]\n}\n\ninput ClaimWhereUniqueInput {\n  id: ID\n  name: String\n}\n\nscalar Long\n\ntype Mutation {\n  createCity(data: CityCreateInput!): City!\n  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City\n  updateManyCities(data: CityUpdateManyMutationInput!, where: CityWhereInput): BatchPayload!\n  upsertCity(where: CityWhereUniqueInput!, create: CityCreateInput!, update: CityUpdateInput!): City!\n  deleteCity(where: CityWhereUniqueInput!): City\n  deleteManyCities(where: CityWhereInput): BatchPayload!\n  createClaim(data: ClaimCreateInput!): Claim!\n  updateClaim(data: ClaimUpdateInput!, where: ClaimWhereUniqueInput!): Claim\n  updateManyClaims(data: ClaimUpdateManyMutationInput!, where: ClaimWhereInput): BatchPayload!\n  upsertClaim(where: ClaimWhereUniqueInput!, create: ClaimCreateInput!, update: ClaimUpdateInput!): Claim!\n  deleteClaim(where: ClaimWhereUniqueInput!): Claim\n  deleteManyClaims(where: ClaimWhereInput): BatchPayload!\n  createRole(data: RoleCreateInput!): Role!\n  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role\n  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!\n  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!\n  deleteRole(where: RoleWhereUniqueInput!): Role\n  deleteManyRoles(where: RoleWhereInput): BatchPayload!\n  createUser(data: UserCreateInput!): User!\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  deleteUser(where: UserWhereUniqueInput!): User\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  city(where: CityWhereUniqueInput!): City\n  cities(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [City]!\n  citiesConnection(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CityConnection!\n  claim(where: ClaimWhereUniqueInput!): Claim\n  claims(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Claim]!\n  claimsConnection(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClaimConnection!\n  role(where: RoleWhereUniqueInput!): Role\n  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!\n  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!\n  user(where: UserWhereUniqueInput!): User\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n  node(id: ID!): Node\n}\n\ntype Role {\n  id: ID!\n  name: String!\n  claims(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Claim!]\n}\n\ntype RoleConnection {\n  pageInfo: PageInfo!\n  edges: [RoleEdge]!\n  aggregate: AggregateRole!\n}\n\ninput RoleCreateInput {\n  id: ID\n  name: String!\n  claims: ClaimCreateManyInput\n}\n\ninput RoleCreateManyInput {\n  create: [RoleCreateInput!]\n  connect: [RoleWhereUniqueInput!]\n}\n\ntype RoleEdge {\n  node: Role!\n  cursor: String!\n}\n\nenum RoleOrderByInput {\n  id_ASC\n  id_DESC\n  name_ASC\n  name_DESC\n}\n\ntype RolePreviousValues {\n  id: ID!\n  name: String!\n}\n\ninput RoleScalarWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  AND: [RoleScalarWhereInput!]\n  OR: [RoleScalarWhereInput!]\n  NOT: [RoleScalarWhereInput!]\n}\n\ntype RoleSubscriptionPayload {\n  mutation: MutationType!\n  node: Role\n  updatedFields: [String!]\n  previousValues: RolePreviousValues\n}\n\ninput RoleSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: RoleWhereInput\n  AND: [RoleSubscriptionWhereInput!]\n  OR: [RoleSubscriptionWhereInput!]\n  NOT: [RoleSubscriptionWhereInput!]\n}\n\ninput RoleUpdateDataInput {\n  name: String\n  claims: ClaimUpdateManyInput\n}\n\ninput RoleUpdateInput {\n  name: String\n  claims: ClaimUpdateManyInput\n}\n\ninput RoleUpdateManyDataInput {\n  name: String\n}\n\ninput RoleUpdateManyInput {\n  create: [RoleCreateInput!]\n  update: [RoleUpdateWithWhereUniqueNestedInput!]\n  upsert: [RoleUpsertWithWhereUniqueNestedInput!]\n  delete: [RoleWhereUniqueInput!]\n  connect: [RoleWhereUniqueInput!]\n  set: [RoleWhereUniqueInput!]\n  disconnect: [RoleWhereUniqueInput!]\n  deleteMany: [RoleScalarWhereInput!]\n  updateMany: [RoleUpdateManyWithWhereNestedInput!]\n}\n\ninput RoleUpdateManyMutationInput {\n  name: String\n}\n\ninput RoleUpdateManyWithWhereNestedInput {\n  where: RoleScalarWhereInput!\n  data: RoleUpdateManyDataInput!\n}\n\ninput RoleUpdateWithWhereUniqueNestedInput {\n  where: RoleWhereUniqueInput!\n  data: RoleUpdateDataInput!\n}\n\ninput RoleUpsertWithWhereUniqueNestedInput {\n  where: RoleWhereUniqueInput!\n  update: RoleUpdateDataInput!\n  create: RoleCreateInput!\n}\n\ninput RoleWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  claims_every: ClaimWhereInput\n  claims_some: ClaimWhereInput\n  claims_none: ClaimWhereInput\n  AND: [RoleWhereInput!]\n  OR: [RoleWhereInput!]\n  NOT: [RoleWhereInput!]\n}\n\ninput RoleWhereUniqueInput {\n  id: ID\n  name: String\n}\n\ntype Subscription {\n  city(where: CitySubscriptionWhereInput): CitySubscriptionPayload\n  claim(where: ClaimSubscriptionWhereInput): ClaimSubscriptionPayload\n  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype User {\n  id: ID!\n  email: String!\n  password: String\n  name: String\n  city: City\n  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]\n}\n\ntype UserConnection {\n  pageInfo: PageInfo!\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  id: ID\n  email: String!\n  password: String\n  name: String\n  city: CityCreateOneInput\n  roles: RoleCreateManyInput\n}\n\ntype UserEdge {\n  node: User!\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  email_ASC\n  email_DESC\n  password_ASC\n  password_DESC\n  name_ASC\n  name_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  email: String!\n  password: String\n  name: String\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  mutation_in: [MutationType!]\n  updatedFields_contains: String\n  updatedFields_contains_every: [String!]\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n  AND: [UserSubscriptionWhereInput!]\n  OR: [UserSubscriptionWhereInput!]\n  NOT: [UserSubscriptionWhereInput!]\n}\n\ninput UserUpdateInput {\n  email: String\n  password: String\n  name: String\n  city: CityUpdateOneInput\n  roles: RoleUpdateManyInput\n}\n\ninput UserUpdateManyMutationInput {\n  email: String\n  password: String\n  name: String\n}\n\ninput UserWhereInput {\n  id: ID\n  id_not: ID\n  id_in: [ID!]\n  id_not_in: [ID!]\n  id_lt: ID\n  id_lte: ID\n  id_gt: ID\n  id_gte: ID\n  id_contains: ID\n  id_not_contains: ID\n  id_starts_with: ID\n  id_not_starts_with: ID\n  id_ends_with: ID\n  id_not_ends_with: ID\n  email: String\n  email_not: String\n  email_in: [String!]\n  email_not_in: [String!]\n  email_lt: String\n  email_lte: String\n  email_gt: String\n  email_gte: String\n  email_contains: String\n  email_not_contains: String\n  email_starts_with: String\n  email_not_starts_with: String\n  email_ends_with: String\n  email_not_ends_with: String\n  password: String\n  password_not: String\n  password_in: [String!]\n  password_not_in: [String!]\n  password_lt: String\n  password_lte: String\n  password_gt: String\n  password_gte: String\n  password_contains: String\n  password_not_contains: String\n  password_starts_with: String\n  password_not_starts_with: String\n  password_ends_with: String\n  password_not_ends_with: String\n  name: String\n  name_not: String\n  name_in: [String!]\n  name_not_in: [String!]\n  name_lt: String\n  name_lte: String\n  name_gt: String\n  name_gte: String\n  name_contains: String\n  name_not_contains: String\n  name_starts_with: String\n  name_not_starts_with: String\n  name_ends_with: String\n  name_not_ends_with: String\n  city: CityWhereInput\n  roles_every: RoleWhereInput\n  roles_some: RoleWhereInput\n  roles_none: RoleWhereInput\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n";
exports.typeDefs = typeDefs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,